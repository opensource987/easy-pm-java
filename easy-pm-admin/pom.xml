<?xml version="1.0" encoding="UTF-8"?>
			<project xmlns="http://maven.apache.org/POM/4.0.0"
			         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
			    <parent>
			        <artifactId>easy-pm</artifactId>
			        <groupId>com.mdframework</groupId>
			        <version>1.0.0</version>
			    </parent>
			    <modelVersion>4.0.0</modelVersion>
			    <packaging>jar</packaging>
			    <artifactId>easy-pm-admin</artifactId>
				<version>1.0.0</version>
			    <description>
			        admin web服务入口
			    </description>

			    <dependencies>
					<!-- spring security 安全认证 -->
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-security</artifactId>
					</dependency>
			        <!-- spring-boot-devtools -->
			        <dependency>
			            <groupId>org.springframework.boot</groupId>
			            <artifactId>spring-boot-devtools</artifactId>
			            <optional>true</optional> <!-- 表示依赖不会传递 -->
			        </dependency>
					<!--velocity代码生成使用模板 -->
					<dependency>
						<groupId>org.apache.velocity</groupId>
						<artifactId>velocity</artifactId>
					</dependency>
			         <!-- Mysql驱动包 -->
			        <dependency>
			            <groupId>mysql</groupId>
			            <artifactId>mysql-connector-java</artifactId>
			        </dependency>

			        <!-- 核心模块-->
			        <dependency>
			            <groupId>com.mdframework</groupId>
			            <artifactId>easy-pm-srv</artifactId>
			        </dependency>

			        <!-- 低代码模块-->
			        <dependency>
			            <groupId>com.mdframework</groupId>
			            <artifactId>easy-pm-magicapi</artifactId>
			        </dependency>

					<dependency>
						<groupId>com.dtflys.forest</groupId>
						<artifactId>forest-spring-boot-starter</artifactId>
						<version>1.5.19</version>
					</dependency>

					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-amqp</artifactId>
					</dependency>
<!--					<dependency>-->
<!--						<groupId>com.rabbitmq</groupId>-->
<!--						<artifactId>amqp-client</artifactId>-->
<!--						<version>5.1.1</version>-->
<!--					</dependency>-->
<!--					<dependency>-->
<!--						<groupId>javax.mail</groupId>-->
<!--						<artifactId>mail</artifactId>-->
<!--						<version>1.4.7</version>-->
<!--					</dependency>-->

			    </dependencies>

			    <build>
			        <plugins>
			            <plugin>
			                <groupId>org.springframework.boot</groupId>
			                <artifactId>spring-boot-maven-plugin</artifactId>
			                <version>2.1.1.RELEASE</version>
			                <configuration>
			                    <fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->
								<includeSystemScope>true</includeSystemScope>
			                </configuration>
			                <executions>
			                    <execution>
			                        <goals>
			                            <goal>repackage</goal>
			                        </goals>
			                    </execution>
			                </executions>
			            </plugin>
			            <plugin>
			                <groupId>org.apache.maven.plugins</groupId>
			                <artifactId>maven-jar-plugin</artifactId>
			                <version>3.1.1</version>
			                <configuration>
								<excludes>
									<exclude>application-*.yml</exclude>
									<exclude>application.yml</exclude>
									<exclude>bootstrap.yml</exclude>
								</excludes>
			                </configuration>
			           </plugin>
						<!-- docker maven -->
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>docker-maven-plugin</artifactId>
							<configuration>
								<serverId>docker-hub</serverId>
							</configuration>
						</plugin>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>docker-maven-plugin</artifactId>
							<version>0.4.13</version>
							<!--docker镜像相关的配置信息-->
							<configuration>
								<registryUrl>registry.cn-shenzhen.aliyuncs.com</registryUrl>		<!--镜像生成后需要推送到某个仓库地址的配置-->
								<pushImage>true</pushImage>		<!--是否向配置的仓库推送镜像-->
								<imageName>registry.cn-shenzhen.aliyuncs.com/xxxx/${project.artifactId}:${project.version}</imageName>	<!--生成的镜像名称-->
								<!--TAG,这里用工程版本号-->
								<imageTags>
									<imageTag>${project.version}</imageTag>
								</imageTags>
								<dockerHost>http://localhost:2375</dockerHost>
								<!-- 使用Dockerfile -->
								<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
								<!--这里是复制 jar 包到 docker 容器指定目录配置-->
								<forceTags>true</forceTags>		<!--覆盖相同标签镜像-->
								<resources>					<!-- 指定资源文件 -->
									<resource>
										<targetPath>/</targetPath>	<!-- 指定要复制的目录路径，这里是当前目录 -->
										<directory>${project.build.directory}</directory>	<!-- 指定要复制的根目录，这里是target目录 -->
										<include>${project.build.finalName}.jar</include>	<!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
									</resource>
								</resources>
							</configuration>
						</plugin>
<!--						<plugin>-->
<!--							<groupId>org.apache.maven.plugins</groupId>-->
<!--							<artifactId>maven-install-plugin</artifactId>-->
<!--							<version>2.5.2</version>-->
<!--							<executions>-->
<!--								<execution>-->
<!--									<id>install-external</id>-->
<!--									<phase>clean</phase>-->
<!--									<configuration>-->
<!--										<file>${project.basedir}/src/main/resources/lib/taobao-sdk-java-auto_1479188381469-20211101.jar</file>-->
<!--										<repositoryLayout>default</repositoryLayout>-->
<!--										<groupId>dingding</groupId>-->
<!--										<artifactId>dingding</artifactId>-->
<!--										<version>2.8</version>-->
<!--										<packaging>jar</packaging>-->
<!--										<generatePom>true</generatePom>-->
<!--									</configuration>-->
<!--									<goals>-->
<!--										<goal>install-file</goal>-->
<!--									</goals>-->
<!--								</execution>-->
<!--							</executions>-->
<!--						</plugin>-->
					</plugins>
					<finalName>${project.artifactId}-${project.version}</finalName>
<!--					<resources>-->
<!--						<resource>-->
<!--							<directory>lib</directory>-->
<!--							<targetPath>/BOOT-INF/lib/</targetPath>-->
<!--							<includes>-->
<!--								<include>**/*.jar</include>-->
<!--							</includes>-->
<!--						</resource>-->
<!--					</resources>-->
			    </build>

			</project>


