package ${packageName}.${moduleName}.domain.req;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.mdframework.common.annotation.Excel;
import com.mdframework.common.utils.StringUtils;
import com.mdframework.module.base.domain.req.BaseReq;
import ${packageName}.${moduleName}.domain.${ClassName};
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.springframework.validation.annotation.Validated;

/**

 * ==================================================================

 * 这不是一个自由软件！未经本公司授权您只能在不用于商业目的的前提下
 * 对本程序代码进行修改和使用；不允许对本程序代码以任何目的的再发布。
 * ==================================================================
 *
 * @ClassName ${ClassName}Req
 * @Author ${author}
 * @Date ${datetime}
 * @Version 1.0.0
 * @Description 列表查询信息体
 */
@Data
@ToString
@EqualsAndHashCode
@NoArgsConstructor
@Accessors(chain = true)
public class ${ClassName}Req extends BaseReq {
    private static final long serialVersionUID = 1L;

    #foreach($column in $columns)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#if($column.query)
     @ApiModelProperty("${column.columnComment}")
     private ${javaType} ${javaField};
#end
#end

    /**
    * @Description 生成查询wrapper
    * @Author Jesse(573110463@qq.com)
    * @Date 2020-11-04 16:04
    * @Param [lqw]
    * @Param [isVO] 是否vo查询体，true的话走的是mapper.xml里面的查询语句，不过查询语法还是mybatis-plus，主要用于某些关联查询出一些非数据表字段
    * @Return void
    */
    public void generatorQuery(QueryWrapper<${ClassName}> lqw,boolean isVo) {
        String alias = "";
        if (isVo) {
            alias = "o.";
            lqw.eq(alias+"del_status",0);
        }
#foreach($column in $columns)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#if($column.query)
#if($column.queryType == "EQ")
#if($javaType == 'String')
        if (StringUtils.isNotBlank(this.get$AttrName())){
        lqw.eq(alias+"$column.columnName" ,this.get$AttrName());
        }
#else
        if (this.get$AttrName() != null){
        lqw.eq(alias+"$column.columnName" ,this.get$AttrName());
        }
#end
#elseif($queryType == "NE")
#if($javaType == 'String')
        if (StringUtils.isNotBlank(this.get$AttrName())){
        lqw.ne(alias+"$column.columnName" ,this.get$AttrName());
        }
#else
        if (this.get$AttrName() != null){
        lqw.ne(alias+"$column.columnName" ,this.get$AttrName());
        }
#end
#elseif($queryType == "GT")
#if($javaType == 'String')
        if (StringUtils.isNotBlank(this.get$AttrName())){
            lqw.gt(alias+"$column.columnName",this.get$AttrName());
        }
#else
        if (this.get$AttrName() != null){
            lqw.gt(alias+"$column.columnName" ,this.get$AttrName());
        }
#end
#elseif($queryType == "GTE")
#if($javaType == 'String')
        if (StringUtils.isNotBlank(this.get$AttrName())){
            lqw.ge(alias+"$column.columnName",this.get$AttrName());
        }
#else
        if (this.get$AttrName() != null){
            lqw.ge(alias+"$column.columnName" ,this.get$AttrName());
        }
#end
#elseif($queryType == "LT")
#if($javaType == 'String')
        if (StringUtils.isNotBlank(this.get$AttrName())){
            lqw.lt(alias+"$column.columnName" ,this.get$AttrName());
        }
#else
        if (this.get$AttrName() != null){
            lqw.lt(alias+"$column.columnName",this.get$AttrName());
        }
#end
#elseif($queryType == "LTE")
#if($javaType == 'String')
        if (StringUtils.isNotBlank(this.get$AttrName())){
            lqw.le(alias+"$column.columnName",this.get$AttrName());
        }
#else
        if (this.get$AttrName() != null){
            lqw.le(alias+"$column.columnName" ,this.get$AttrName());
        }
#end
#elseif($queryType == "LIKE")
#if($javaType == 'String')
        if (StringUtils.isNotBlank(this.get$AttrName())){
            lqw.like(alias+"$column.columnName",this.get$AttrName());
        }
#else
        if (this.get$AttrName() != null){
            lqw.like(alias+"$column.columnName" ,this.get$AttrName());
        }
#end
#elseif($queryType == "BETWEEN")
#end
#end
#end
    }
}
